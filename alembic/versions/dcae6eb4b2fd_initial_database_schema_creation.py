"""Initial database schema creation.

Revision ID: dcae6eb4b2fd
Revises:
Create Date: 2025-06-30 22:30:54.455696

"""

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "dcae6eb4b2fd"
down_revision: str | None = None
branch_labels: Sequence[str] | None = None
depends_on: Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create repositories table (matching SQLModel Repository schema)
    op.create_table(
        "repositories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("last_analyzed", sa.DateTime(), nullable=True),
        sa.Column("commit_count", sa.Integer(), nullable=False),
        sa.Column("branch_count", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("path"),
    )
    op.create_index(
        op.f("ix_repositories_path"), "repositories", ["path"], unique=False
    )

    # Create commits table (matching SQLModel Commit schema)
    op.create_table(
        "commits",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("sha", sa.String(), nullable=False),
        sa.Column("short_sha", sa.String(), nullable=False),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("author_name", sa.String(), nullable=False),
        sa.Column("author_email", sa.String(), nullable=False),
        sa.Column("author_date", sa.DateTime(), nullable=False),
        sa.Column("committer_name", sa.String(), nullable=False),
        sa.Column("committer_email", sa.String(), nullable=False),
        sa.Column("committer_date", sa.DateTime(), nullable=False),
        sa.Column("files_changed", sa.Integer(), nullable=True),
        sa.Column("insertions", sa.Integer(), nullable=True),
        sa.Column("deletions", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["repository_id"], ["repositories.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sha", "repository_id"),
    )
    op.create_index(op.f("ix_commits_sha"), "commits", ["sha"], unique=False)
    op.create_index(
        op.f("ix_commits_short_sha"), "commits", ["short_sha"], unique=False
    )
    op.create_index(
        op.f("ix_commits_author_date"), "commits", ["author_date"], unique=False
    )

    # Create branches table (matching SQLModel Branch schema)
    op.create_table(
        "branches",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("target_sha", sa.String(), nullable=True),
        sa.Column("is_remote", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["repository_id"], ["repositories.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("repository_id", "name"),
    )
    op.create_index(op.f("ix_branches_name"), "branches", ["name"], unique=False)

    # Create knowledge graph nodes table
    op.create_table(
        "kg_nodes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("node_id", sa.String(), nullable=False),
        sa.Column("node_type", sa.String(), nullable=False),
        sa.Column("properties", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("node_id"),
    )

    # Create knowledge graph edges table
    op.create_table(
        "kg_edges",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_id", sa.String(), nullable=False),
        sa.Column("target_id", sa.String(), nullable=False),
        sa.Column("relationship_type", sa.String(), nullable=False),
        sa.Column("properties", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    # Create embedding records table
    op.create_table(
        "embedding_records",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("content_hash", sa.String(), nullable=False),
        sa.Column("content_type", sa.String(), nullable=False),
        sa.Column("embedding_model", sa.String(), nullable=False),
        sa.Column("embedding_vector", sa.JSON(), nullable=False),
        sa.Column("metadata", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("content_hash", "embedding_model"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
