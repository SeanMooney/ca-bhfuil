[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ca-bhfuil"
version = "0.1.0"
description = "Git repository analysis tool for tracking commits across stable branches"
authors = [
    {name = "Ca-Bhfuil Project"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
keywords = ["git", "analysis", "commits", "branches", "open-source"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core Framework
    "pydantic>=2.0.0",
    
    # High-Performance Git Analysis
    "pygit2>=1.13.0",
    "diskcache>=5.6.0",
    
    # Issue Tracker Integration
    "httpx>=0.25.0",
    "regex>=2023.0.0",
    
    # Configuration Management
    "pydantic-settings[yaml]>=2.0.0",
    "python-dotenv>=1.0.0",
    
    # Terminal Interface
    "typer[all]>=0.9.0",
    "prompt-toolkit>=3.0.0",
    
    # Logging
    "loguru>=0.7.0",
    
    # Utilities
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
ai = [
    "pydantic-ai>=0.0.1",
    "fastmcp>=0.1.0",
]
all = [
    "ca-bhfuil[dev,ai,advanced-analysis,text-processing]",
]
advanced-analysis = [
    "pydriller>=2.5.0",
]
text-processing = [
    "nltk>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/seandstewart/ca-bhfuil"
Repository = "https://github.com/seandstewart/ca-bhfuil"
Issues = "https://github.com/seandstewart/ca-bhfuil/issues"

[project.scripts]
ca-bhfuil = "ca_bhfuil.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["src/ca_bhfuil"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/pyproject.toml",
    "/CLAUDE.md",
]
exclude = [
    "/.venv",
    "/.*",
    "/uv.lock",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    #"B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "N",   # pep8-naming
    "D",   # pydocstyle
    # "S",   # flake8-bandit (security)
    # "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "TCH", # flake8-type-checking
    "PIE", # flake8-pie
    "T20", # flake8-print
    "LOG", # flake8-logging
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
    "D107",  # missing docstring in __init__
    "S101",  # use of assert detected (ok in tests)
    "T201",  # print found (we use logging)
    "N806",  # variable in function should be lowercase (for pydantic models)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "D", "T201", "PLR2004"]
"scripts/**/*" = ["T201", "S602", "S607"]
"src/ca_bhfuil/cli/**/*" = ["T201"]  # CLI can use print

[tool.ruff.lint.isort]
known-first-party = ["ca_bhfuil"]
force-sort-within-sections = true
split-on-trailing-comma = true
no-lines-before = ["future", "standard-library"]
lines-after-imports = 2
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
packages = ["ca_bhfuil"]
strict = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pygit2.*",
    "diskcache.*",
    "fastmcp.*",
    "pydantic_ai.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests as requiring network access",
]
asyncio_mode = "auto"

# UV configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "types-pyyaml>=6.0.12.20250516",
]

[tool.uv.sources]
# Add any custom source configurations here if needed

# Bandit configuration for security scanning
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection in paramiko (false positives)